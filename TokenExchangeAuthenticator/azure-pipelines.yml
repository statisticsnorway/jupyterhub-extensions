# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

name: $(Build.SourceBranch)-$(date:yyyyMMdd)$(rev:.r)
# Pipeline triggers on any branch and tag
trigger:
  branches:
    include:
      - '*'
  tags:
    include:
      - '*'

pool:
  vmImage: 'ubuntu-latest'

jobs:
  - job: 'BuildAndTest'
    displayName: "Build and test python package"
    condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    pool:
      vmImage: 'ubuntu-latest'

    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.8'
        displayName: 'Use Python 3.8'

      - script: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        displayName: 'Install dependencies'

      - script: |
          pip install pytest
          pip install pytest-cov
          pytest tests --doctest-modules --junitxml=junit/test-results.xml --cov=. --cov-report=xml --cov-report=html
        displayName: 'Test with pytest'

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: '**/test-*.xml'
          testRunTitle: 'Publish test results for Python $(python.version)'
      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
          reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'

  - job: 'Release'
    displayName: "Make release and publish to PyPi"
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.8'
        displayName: 'Use Python 3.8'

      - script: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          make install-build-tools
        displayName: 'Install dependencies'

      - script: |
          make release-validate
        displayName: "Validate release before uploading to PyPi"

      # Authenticate Maven to Nexus using predefined Service Connections
      # (Project Settings->Pipelines->Service Connections)
      - task: TwineAuthenticate@1
        displayName: 'Twine Authenticate'
        condition: succeeded()
        inputs:
          pythonUploadServiceConnection: pypi-dapla

      # Use command line script to 'twine upload', use -r to pass the repository name and
      # --config-file to pass the environment variable set by the authenticate task.
      - script: |
          make release-validate
          echo 'Using config file $(PYPIRC_PATH)'
          python -m twine upload -r "ssb-ipython-kernels" --config-file $(PYPIRC_PATH) dist/*
        condition: succeeded()
        displayName: "Release to PyPi"
